
[tool.poetry]
name = "inventree"
version = "1.0.0"
description = "InvenTree - Inventory Management System"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "src/backend/InvenTree" }
]

[tool.poetry.dependencies]
python = "^3.9"
django = "^4.2"
djangorestframework = "^3.12"
structlog = "^24.1.0"
whitenoise = "^6.6.0"
django-maintenance-mode = "^0.19.0"
django-filter = "^23.5"
django-cors-headers = "^4.3.1"
django-cleanup = "^8.0.0"
django-mptt = "^0.15.0"
django-markdownify = "^0.11.6"
django-money = "^3.3.0"
django-dbbackup = "^4.0.0"
django-taggit = "^5.0.1"
django-flags = "^5.0.0"
django-structlog = "^5.0.0"
django-allauth = { version = "^0.61.1", extras = ["mfa", "socialaccount", "saml", "openid"] }
django-otp = "==1.3.0"
django-oauth-toolkit = "^2.3.0"
drf-spectacular = "^0.27.1"
django-ical = "^1.8.0"
django-mailbox = "^5.5.0"
django-anymail = { version = "^10.0", extras = ["amazon_ses", "postal"] }
django-error-report-2 = "*"
django-redis = ">=5.0.0"
django-q2 = "^1.6.3"
django-q-sentry = "^0.3.4"
django-sesame = "^3.3.3"
django-sql-utils = "^0.8.4"
django-sslserver = "^0.22"
django-stdimage = "^6.0.1"
django-xforwardedfor-middleware = "*"

pypdf = "^4.2.0"
weasyprint = "^62.1"
pint = "^0.23"
python-dotenv = "^1.0.1"
feedparser = "^6.0.10"
gunicorn = "^22.0.0"
docutils = "^0.21.2"
dulwich = "^0.22.1"
jinja2 = "^3.1.4"
pdf2image = "^1.17.0"
pillow = "^10.3.0"
pip-licenses = "^4.3.4"
ppf.datamatrix = "*"
python-barcode = { version = "^0.15.1", extras = ["images"] }
pyyaml = ">=6.0.1"
qrcode = { version = "^7.4.2", extras = ["pil"] }
rapidfuzz = "^3.9.7"
sentry-sdk = "^2.7.1"
setuptools = "*"
tablib = { version = "^3.5.0", extras = ["xls", "xlsx", "yaml"] }

opentelemetry-api = "^1.24.0"
opentelemetry-sdk = "^1.24.0"
opentelemetry-exporter-otlp = "^1.24.0"
opentelemetry-instrumentation-django = "^0.45b0"
opentelemetry-instrumentation-requests = "^0.45b0"
opentelemetry-instrumentation-redis = "^0.45b0"
opentelemetry-instrumentation-sqlite3 = "^0.45b0"
opentelemetry-instrumentation-system-metrics = "^0.45b0"
opentelemetry-instrumentation-wsgi = "^0.45b0"
opentelemetry-instrumentation-psycopg = "^0.45b0"
opentelemetry-instrumentation-pymysql = "^0.45b0"
grpcio = "^1.63.0"

[tool.poetry.dev-dependencies]
# Add your development dependencies here, for example:
# pytest = "^6.2"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "test.py",
    "tests",
    "venv",
    "env",
    ".venv",
    ".env",
    "src/backend/plugins/*",
]
src = ["src/backend/InvenTree"]
# line-length = 120

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["D104"]

[tool.ruff.lint]
select = ["A", "B", "C", "C4", "D", "F", "I", "N", "SIM", "PIE", "PLE", "PLW", "RUF", "UP", "W",
#"DOC201", "DOC202", # enforce return docs
"DOC402","DOC403", # enforce yield docs
#"DOC501","DOC502", # enforce raise
]
# Things that should be enabled in the future:
# - LOG
# - DJ # for Django stuff
# - S # for security stuff (bandit)
# - D401 - Imperative docstrings

ignore = [
    "PLE1205",
    # - PLE1205 - Too many arguments for logging format string
    "PLW2901",
    # - PLW2901 - Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PLW0602","PLW0603","PLW0604",  # global variable things
    "RUF015",
    # - RUF015 - Prefer next({iterable}) over single element slice
    "RUF012",
    # - RUF012 - Mutable class attributes should be annotated with typing.ClassVar
    "RUF052",
    # - RUF052 - Local dummy variable is accessed
    "SIM117",
    # - SIM117 - Use a single with statement with multiple contexts instead of nested with statements
    "SIM102",
    # - SIM102 - Use a single if statement instead of nested if statements
    "SIM105",
    # - SIM105 - Use contextlib.suppress({exception}) instead of try-except-pass
    "C901",
    # - C901 - function is too complex
    "N999",
    # - N802 - function name should be lowercase
	"N802",
	# - N806 - variable should be lowercase
	"N806",
	# - N812 - lowercase imported as non-lowercase
	"N812",
    # - RUF032 - decimal-from-float-literal
    "RUF032",
    # - RUF045 - implicit-class-var-in-dataclass
    "RUF045",
    # - UP045 - Use `X | None` instead of `Optional[X]`
    "UP045",

    # TODO These should be followed up and fixed
    # - B904 Within an `except` clause, raise exceptions
    "B904",

    # Remove fast
    "A002", "B018"
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = false
section-order = [
    "future",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
"django" = ["django"]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "auto"

[tool.uv.pip]
python-version = "3.9.2"
no-strip-extras=true
generate-hashes=true

[tool.coverage.run]
source = ["src/backend/InvenTree", "InvenTree"]
dynamic_context = "test_function"

[tool.coverage.html]
show_contexts = true

[tool.djlint]
ignore = "D018,H006,H008,H020,H021,H023,H025,H030,H031,T002"

[tool.isort]
src_paths=["src/backend/InvenTree", ]
skip_glob ="*/migrations/*.py"
known_django="django"
sections=["FUTURE","STDLIB","DJANGO","THIRDPARTY","FIRSTPARTY","LOCALFOLDER"]

[tool.codespell]
ignore-words-list = ["assertIn","SME","intoto","fitH"]
